#include <stdio.h>
int main(){
  int i,k,l,c,S[9][9];
  scanf("%d",&k);
  int c0[9],c1[9],c2[9],c3[9],c4[9],c5[9],c6[9],c7[9],c8[9];
  int l0[9],l1[9],l2[9],l3[9],l4[9],l5[9],l6[9],l7[9],l8[9];
  int b1[3][3],b2[3][3],b3[3][3],b4[3][3],b5[3][3],b6[3][3],b7[3][3],b8[3][3],b9[3][3];
  int somac0[k],somac1[k],somac2[k],somac3[k],somac4[k],somac5[k],somac6[k],somac7[k],somac8[k];
  int somal0[k],somal1[k],somal2[k],somal3[k],somal4[k],somal5[k],somal6[k],somal7[k],somal8[k];
  int somab1[k],somab2[k],somab3[k],somab4[k],somab5[k],somab6[k],somab7[k],somab8[k],somab9[k];

  for(i=0; i<k; i++){
    for ( l=0; l<9; l++ )         //le a matriz
      for ( c=0; c<9; c++ ){
       scanf ("%d", &S[l][c]);
      
      }
   b1[0][0] = S[0][0];
   b1[0][1] = S[0][1];          //As matrizes b verificam os blocos
   b1[0][2] = S[0][2];
   b1[1][0] = S[1][0];
   b1[1][1] = S[1][1];
   b1[1][2] = S[1][2];
   b1[2][0] = S[2][0];
   b1[2][1] = S[2][1];
   b1[2][2] = S[2][2];
   
   somab1[i] = 0;
   somab1[i] = somab1[i]+(b1[0][0]*b1[0][0]) + (b1[0][1]*b1[0][1]) + (b1[0][2]*b1[0][2]) + (b1[1][0]*b1[1][0]) + (b1[1][1]*b1[1][1]) + (b1[1][2]*b1[1][2]) + (b1[2][0]*b1[2][0]) + (b1[2][1]*b1[2][1]) + (b1[2][2]*b1[2][2]);
   
   b2[0][0] = S[0][3];
   b2[0][1] = S[0][4];
   b2[0][2] = S[0][5];
   b2[1][0] = S[1][3];
   b2[1][1] = S[1][4];
   b2[1][2] = S[1][5];
   b2[2][0] = S[2][3];
   b2[2][1] = S[2][4];
   b2[2][2] = S[2][5];
   
   somab2[i] = 0;
   somab2[i] = somab2[i]+ (b2[0][0]*b2[0][0]) + (b2[0][1]*b2[0][1]) + (b2[0][2]*b2[0][2]) + (b2[1][0]*b2[1][0]) + (b2[1][1]*b2[1][1]) + (b2[1][2]*b2[1][2]) + (b2[2][0]*b2[2][0]) + (b2[2][1]*b2[2][1]) + (b2[2][2]*b2[2][2]);
   
   b3[0][0] = S[0][6];
   b3[0][1] = S[0][7];
   b3[0][2] = S[0][8];
   b3[1][0] = S[1][6];
   b3[1][1] = S[1][7];
   b3[1][2] = S[1][8];
   b3[2][0] = S[2][6];
   b3[2][1] = S[2][7];
   b3[2][2] = S[2][8];
   
   somab3[i]=0;     
   somab3[i] = somab3[i]+(b3[0][0]*b3[0][0]) + (b3[0][1]*b3[0][1]) + (b3[0][2]*b3[0][2]) + (b3[1][0]*b3[1][0]) + (b3[1][1]*b3[1][1]) + (b3[1][2]*b3[1][2]) + (b3[2][0]*b3[2][0]) + (b3[2][1]*b3[2][1]) + (b3[2][2]*b3[2][2]);
   
   b4[0][0] = S[3][0];
   b4[0][1] = S[3][1];
   b4[0][2] = S[3][2];
   b4[1][0] = S[4][0];
   b4[1][1] = S[4][1];
   b4[1][2] = S[4][2];
   b4[2][0] = S[5][0];
   b4[2][1] = S[5][1];
   b4[2][2] = S[5][2];
   
   somab4[i]=0;     
   somab4[i] = somab4[i]+(b4[0][0]*b4[0][0]) + (b4[0][1]*b4[0][1]) + (b4[0][2]*b4[0][2]) + (b4[1][0]*b4[1][0]) + (b4[1][1]*b4[1][1]) + (b4[1][2]*b4[1][2]) + (b4[2][0]*b4[2][0]) + (b4[2][1]*b4[2][1]) + (b4[2][2]*b4[2][2]);
   
   b5[0][0] = S[3][3];
   b5[0][1] = S[3][4];
   b5[0][2] = S[3][5];
   b5[1][0] = S[4][3];
   b5[1][1] = S[4][4];
   b5[1][2] = S[4][5];
   b5[2][0] = S[5][3];
   b5[2][1] = S[5][4];
   b5[2][2] = S[5][5];
   
   somab5[i]=0;  
   somab5[i] = somab5[i]+(b5[0][0]*b5[0][0]) + (b5[0][1]*b5[0][1]) + (b5[0][2]*b5[0][2]) + (b5[1][0]*b5[1][0]) + (b5[1][1]*b5[1][1]) + (b5[1][2]*b5[1][2]) + (b5[2][0]*b5[2][0]) + (b5[2][1]*b5[2][1]) + (b5[2][2]*b5[2][2]);
   
   b6[0][0] = S[3][6];
   b6[0][1] = S[3][7];
   b6[0][2] = S[3][8];
   b6[1][0] = S[4][6];
   b6[1][1] = S[4][7];
   b6[1][2] = S[4][8];
   b6[2][0] = S[5][6];
   b6[2][1] = S[5][7];
   b6[2][2] = S[5][8];
   
   somab6[i]=0;     
   somab6[i] = somab6[i]+(b6[0][0]*b6[0][0]) + (b6[0][1]*b6[0][1]) + (b6[0][2]*b6[0][2]) + (b6[1][0]*b6[1][0]) + (b6[1][1]*b6[1][1]) + (b6[1][2]*b6[1][2]) + (b6[2][0]*b6[2][0]) + (b6[2][1]*b6[2][1]) + (b6[2][2]*b6[2][2]);
   
   b7[0][0] = S[6][0];
   b7[0][1] = S[6][1];
   b7[0][2] = S[6][2];
   b7[1][0] = S[7][0];
   b7[1][1] = S[7][1];
   b7[1][2] = S[7][2];
   b7[2][0] = S[8][0];
   b7[2][1] = S[8][1];
   b7[2][2] = S[8][2];   
   
   somab7[i]=0;     
   somab7[i] = somab7[i]+(b7[0][0]*b7[0][0]) + (b7[0][1]*b7[0][1]) + (b7[0][2]*b7[0][2]) + (b7[1][0]*b7[1][0]) + (b7[1][1]*b7[1][1]) + (b7[1][2]*b7[1][2]) + (b7[2][0]*b7[2][0]) + (b7[2][1]*b7[2][1]) + (b7[2][2]*b7[2][2]);
   
   b8[0][0] = S[6][3];
   b8[0][1] = S[6][4];
   b8[0][2] = S[6][5];
   b8[1][0] = S[7][3];
   b8[1][1] = S[7][4];
   b8[1][2] = S[7][5];
   b8[2][0] = S[8][3];
   b8[2][1] = S[8][4];
   b8[2][2] = S[8][5];
   
   somab8[i]=0;  
   somab8[i] = somab8[i]+ (b8[0][0]*b8[0][0]) + (b8[0][1]*b8[0][1]) + (b8[0][2]*b8[0][2]) + (b8[1][0]*b8[1][0]) + (b8[1][1]*b8[1][1]) + (b8[1][2]*b8[1][2]) + (b8[2][0]*b8[2][0]) + (b8[2][1]*b8[2][1]) + (b8[2][2]*b8[2][2]);
   
   b9[0][0] = S[6][6];
   b9[0][1] = S[6][7];
   b9[0][2] = S[6][8];
   b9[1][0] = S[7][6];
   b9[1][1] = S[7][7];
   b9[1][2] = S[7][8];
   b9[2][0] = S[8][6];
   b9[2][1] = S[8][7];
   b9[2][2] = S[8][8];
   
   somab9[i]=0;
   somab9[i] = somab9[i]+(b9[0][0]*b9[0][0]) + (b9[0][1]*b9[0][1]) + (b9[0][2]*b9[0][2]) + (b9[1][0]*b9[1][0]) + (b9[1][1]*b9[1][1]) + (b9[1][2]*b9[1][2]) + (b9[2][0]*b9[2][0]) + (b9[2][1]*b9[2][1]) + (b9[2][2]*b9[2][2]);

  c0[0] =S[0][0]  ;
  c0[1] =S[1][0]  ;       //as matrizes c verificam colunas
  c0[2] =S[2][0]  ;
  c0[3] =S[3][0]  ;
  c0[4] =S[4][0]  ;
  c0[5] =S[5][0]  ;
  c0[6] =S[6][0]  ;
  c0[7] =S[7][0]  ;
  c0[8] =S[8][0]  ;

  somac0[i]=0;
  somac0[i] =somac0[i]+ (c0[0]*c0[0]) + (c0[1]*c0[1])+ (c0[2]*c0[2]) + (c0[3]*c0[3])+(c0[4]*c0[4]) + (c0[5]*c0[5]) + (c0[6]*c0[6]) + (c0[7]*c0[7])+ (c0[8]*c0[8]);
  
  c1[0] =S[0][1]   ;
  c1[1] =S[1][1]   ;
  c1[2] =S[2][1]   ;
  c1[3] =S[3][1]   ;
  c1[4] =S[4][1]   ;
  c1[5] =S[5][1]   ;
  c1[6] =S[6][1]   ;
  c1[7] =S[7][1]   ;
  c1[8] =S[8][1]   ;
  
  somac1[i]=0;
  somac1[i] = somac1[i]+(c1[0]*c1[0]) + (c1[1]*c1[1])+ (c1[2]*c1[2]) + (c1[3]*c1[3])+(c1[4]*c1[4]) + (c1[5]*c1[5]) + (c1[6]*c1[6]) + (c1[7]*c1[7])+ (c1[8]*c1[8]);

  c2[0] =S[0][2]   ;
  c2[1] =S[1][2]   ;
  c2[2] =S[2][2]   ;
  c2[3] =S[3][2]   ;
  c2[4] =S[4][2]   ;
  c2[5] =S[5][2]   ;
  c2[6] =S[6][2]   ;
  c2[7] =S[7][2]   ;
  c2[8] =S[8][2]   ;

  somac2[i]=0;
  somac2[i] =somac2[i]+ (c2[0]*c2[0]) + (c2[1]*c2[1])+ (c2[2]*c2[2]) + (c2[3]*c2[3])+(c2[4]*c2[4]) + (c2[5]*c2[5]) + (c2[6]*c2[6]) + (c2[7]*c2[7])+ (c2[8]*c2[8]);
  
  c3[0] =S[0][3]   ;
  c3[1] =S[1][3]   ;
  c3[2] =S[2][3]   ;
  c3[3] =S[3][3]   ;
  c3[4] =S[4][3]   ;
  c3[5] =S[5][3]   ;
  c3[6] =S[6][3]   ;
  c3[7] =S[7][3]   ;
  c3[8] =S[8][3]   ;

  somac3[i]=0;
  somac3[i] =somac3[i]+ (c3[0]*c3[0]) + (c3[1]*c3[1])+ (c3[2]*c3[2]) + (c3[3]*c3[3])+(c3[4]*c3[4]) + (c3[5]*c3[5]) + (c3[6]*c3[6]) + (c3[7]*c3[7])+ (c3[8]*c3[8]);
  
  c4[0] =S[0][4]   ;
  c4[1] =S[1][4]   ;
  c4[2] =S[2][4]   ;
  c4[3] =S[3][4]   ;
  c4[4] =S[4][4]   ;
  c4[5] =S[5][4]   ;
  c4[6] =S[6][4]   ;
  c4[7] =S[7][4]   ;
  c4[8] =S[8][4]   ;

  somac4[i]=0;
  somac4[i] = somac4[i]+(c4[0]*c4[0]) + (c4[1]*c4[1])+ (c4[2]*c4[2]) + (c4[3]*c4[3])+(c4[4]*c4[4]) + (c4[5]*c4[5]) + (c4[6]*c4[6]) + (c4[7]*c4[7])+ (c4[8]*c4[8]);
  
  c5[0] =S[0][5]   ;
  c5[1] =S[1][5]   ;
  c5[2] =S[2][5]   ;
  c5[3] =S[3][5]   ;
  c5[4] =S[4][5]   ;
  c5[5] =S[5][5]   ;
  c5[6] =S[6][5]   ;
  c5[7] =S[7][5]   ;
  c5[8] =S[8][5]   ;

  somac5[i]=0;
  somac5[i] =somac5[i]+ (c5[0]*c5[0]) + (c5[1]*c5[1])+ (c5[2]*c5[2]) + (c5[3]*c5[3])+(c5[4]*c5[4]) + (c5[5]*c5[5]) + (c5[6]*c5[6]) + (c5[7]*c5[7])+ (c5[8]*c5[8]);
  
  c6[0] =S[0][6]   ;
  c6[1] =S[1][6]   ;
  c6[2] =S[2][6]   ;
  c6[3] =S[3][6]   ;
  c6[4] =S[4][6]   ;
  c6[5] =S[5][6]   ;
  c6[6] =S[6][6]   ;
  c6[7] =S[7][6]   ;
  c6[8] =S[8][6]   ;

  somac6[i]=0;
  somac6[i] = somac6[i]+(c6[0]*c6[0]) + (c6[1]*c6[1])+ (c6[2]*c6[2]) + (c6[3]*c6[3])+(c6[4]*c6[4]) + (c6[5]*c6[5]) + (c6[6]*c6[6]) + (c6[7]*c6[7])+ (c6[8]*c6[8]);
  
  c7[0] =S[0][7]   ;
  c7[1] =S[1][7]   ;
  c7[2] =S[2][7]   ;
  c7[3] =S[3][7]   ;
  c7[4] =S[4][7]   ;
  c7[5] =S[5][7]   ;
  c7[6] =S[6][7]   ;
  c7[7] =S[7][7]  ;
  c7[8] =S[8][7]   ;

  somac7[i]=0;
  somac7[i] =somac7[i]+ (c7[0]*c7[0]) + (c7[1]*c7[1])+ (c7[2]*c7[2]) + (c7[3]*c7[3])+(c7[4]*c7[4]) + (c7[5]*c7[5]) + (c7[6]*c7[6]) + (c7[7]*c7[7])+ (c7[8]*c7[8]);
  
  c8[0] =S[0][8]   ;
  c8[1] =S[1][8]   ;
  c8[2] =S[2][8]   ;
  c8[3] =S[3][8]   ;
  c8[4] =S[4][8]   ;
  c8[5] =S[5][8]   ;
  c8[6] =S[6][8]   ;
  c8[7] =S[7][8]   ;
  c8[8] =S[8][8]   ;
  
  somac8[i]=0;
  somac8[i] =somac8[i]+ (c8[0]*c8[0]) + (c8[1]*c8[1])+ (c8[2]*c8[2]) + (c8[3]*c8[3])+(c8[4]*c8[4]) + (c8[5]*c8[5]) + (c8[6]*c8[6]) + (c8[7]*c8[7])+ (c8[8]*c8[8]);
  
  
  l0[0] =S[0][0]  ;
  l0[1] =S[0][1]  ;
  l0[2] =S[0][2]  ;             //as matrizes l verificam as linhas
  l0[3] =S[0][3]  ;
  l0[4] =S[0][4]  ;
  l0[5] =S[0][5]  ;
  l0[6] =S[0][6]  ;
  l0[7] =S[0][7]  ;
  l0[8] =S[0][8]  ;

  somal0[i]=0;
  somal0[i] = somal0[i]+(l0[0]*l0[0]) + (l0[1]*l0[1])+ (l0[2]*l0[2]) + (l0[3]*l0[3])+(l0[4]*l0[4]) + (l0[5]*l0[5]) + (l0[6]*l0[6]) + (l0[7]*l0[7])+ (l0[8]*l0[8]);
  
  l1[0] =S[1][0]   ;
  l1[1] =S[1][1]   ;
  l1[2] =S[1][2]   ;
  l1[3] =S[1][3]   ;
  l1[4] =S[1][4]   ;
  l1[5] =S[1][5]   ;
  l1[6] =S[1][6]   ;
  l1[7] =S[1][7]   ;
  l1[8] =S[1][8]   ;
  
  somal1[i]=0;
  somal1[i] = somal1[i]+ (l1[0]*l1[0]) + (l1[1]*l1[1])+ (l1[2]*l1[2]) + (l1[3]*l1[3])+(l1[4]*l1[4]) + (l1[5]*l1[5]) + (l1[6]*l1[6]) + (l1[7]*l1[7])+ (l1[8]*l1[8]);
  
  l2[0] =S[2][0]   ;
  l2[1] =S[2][1]   ;
  l2[2] =S[2][2]   ;
  l2[3] =S[2][3]   ;
  l2[4] =S[2][4]   ;
  l2[5] =S[2][5]   ;
  l2[6] =S[2][6]   ;
  l2[7] =S[2][7]   ;
  l2[8] =S[2][8]   ;

  somal2[i]=0;
  somal2[i] = somal2[i]+ (l2[0]*l2[0]) + (l2[1]*l2[1])+ (l2[2]*l2[2]) + (l2[3]*l2[3])+(l2[4]*l2[4]) + (l2[5]*l2[5]) + (l2[6]*l2[6]) + (l2[7]*l2[7])+ (l2[8]*l2[8]);
  
  l3[0] =S[3][0]   ;
  l3[1] =S[3][1]   ;
  l3[2] =S[3][2]   ;
  l3[3] =S[3][3]   ;
  l3[4] =S[3][4]   ;
  l3[5] =S[3][5]   ;
  l3[6] =S[3][6]   ;
  l3[7] =S[3][7]   ;
  l3[8] =S[3][8]   ;

  somal3[i]=0;
  somal3[i] = somal3[i]+(l3[0]*l3[0]) + (l3[1]*l3[1])+ (l3[2]*l3[2]) + (l3[3]*l3[3])+(l3[4]*l3[4]) + (l3[5]*l3[5]) + (l3[6]*l3[6]) + (l3[7]*l3[7])+ (l3[8]*l3[8]);
  
  l4[0] =S[4][0]   ;
  l4[1] =S[4][1]   ;
  l4[2] =S[4][2]   ;
  l4[3] =S[4][3]   ;
  l4[4] =S[4][4]   ;
  l4[5] =S[4][5]   ;
  l4[6] =S[4][6]   ;
  l4[7] =S[4][7]   ;
  l4[8] =S[4][8]   ;

  somal4[i]=0;
  somal4[i] =somal4[i]+ (l4[0]*l4[0]) + (l4[1]*l4[1])+ (l4[2]*l4[2]) + (l4[3]*l4[3])+(l4[4]*l4[4]) + (l4[5]*l4[5]) + (l4[6]*l4[6]) + (l4[7]*l4[7])+ (l4[8]*l4[8]);
  
  l5[0] =S[5][0]   ;
  l5[1] =S[5][1]   ;
  l5[2] =S[5][2]   ;
  l5[3] =S[5][3]   ;
  l5[4] =S[5][4]   ;
  l5[5] =S[5][5]   ;
  l5[6] =S[5][6]   ;
  l5[7] =S[5][7]   ;
  l5[8] =S[5][8]   ;

  somal5[i]=0;
  somal5[i] = somal5[i]+ (l5[0]*l5[0]) + (l5[1]*l5[1])+ (l5[2]*l5[2]) + (l5[3]*l5[3])+(l5[4]*l5[4]) + (l5[5]*l5[5]) + (l5[6]*l5[6]) + (l5[7]*l5[7])+ (l5[8]*l5[8]);
  
  l6[0] =S[6][0]   ;
  l6[1] =S[6][1]   ;
  l6[2] =S[6][2]   ;
  l6[3] =S[6][3]   ;
  l6[4] =S[6][4]   ;
  l6[5] =S[6][5]   ;
  l6[6] =S[6][6]   ;
  l6[7] =S[6][7]   ;
  l6[8] =S[6][8]   ;

  somal6[i]=0;
  somal6[i] = somal6[i]+ (l6[0]*l6[0]) + (l6[1]*l6[1])+ (l6[2]*l6[2]) + (l6[3]*l6[3])+(l6[4]*l6[4]) + (l6[5]*l6[5]) + (l6[6]*l6[6]) + (l6[7]*l6[7])+ (l6[8]*l6[8]);
  
  l7[0] =S[7][0]   ;
  l7[1] =S[7][1]   ;
  l7[2] =S[7][2]   ;
  l7[3] =S[7][3]   ;
  l7[4] =S[7][4]   ;
  l7[5] =S[7][5]   ;
  l7[6] =S[7][6]   ;
  l7[7] =S[7][7]  ;
  l7[8] =S[7][8]   ;

  somal7[i]=0;
  somal7[i] = somal7[i]+(l7[0]*l7[0]) + (l7[1]*l7[1])+ (l7[2]*l7[2]) + (l7[3]*l7[3])+(l7[4]*l7[4]) + (l7[5]*l7[5]) + (l7[6]*l7[6]) + (l7[7]*l7[7])+ (l7[8]*l7[8]);
  
  l8[0] =S[8][0]   ;
  l8[1] =S[8][1]   ;
  l8[2] =S[8][2]   ;
  l8[3] =S[8][3]   ;
  l8[4] =S[8][4]   ;
  l8[5] =S[8][5]   ;
  l8[6] =S[8][6]   ;
  l8[7] =S[8][7]   ;
  l8[8] =S[8][8]   ;

  somal8[i]=0;
  somal8[i] = somal8[i] +(l8[0]*l8[0]) + (l8[1]*l8[1])+ (l8[2]*l8[2]) + (l8[3]*l8[3])+(l8[4]*l8[4]) + (l8[5]*l8[5]) + (l8[6]*l8[6]) + (l8[7]*l8[7])+ (l8[8]*l8[8]);
    
  
  
  
  } 
  //no final o if verifica se todas as somas são iguais aos quadrados dos elementos de cada matriz, l, c, b. para assim descobrir se todos os elementos são distintos ou não
  for(i=0; i<k;i++){
  if(somac0[i]==285 && somac1[i]==285 && somac2[i]==285 && somac3[i]==285 && somac4[i]==285 && somac5[i]==285 && somac6[i]==285 && somac7[i]==285 && somac8[i]==285 && somal0[i]==285 && somal1[i]==285 && somal2[i]==285 && somal3[i]==285 && somal4[i]==285 && somal5[i]==285 && somal6[i]==285 && somal7[i]==285 && somal8[i]==285 && somab1[i]==285 && somab2[i]==285 && somab3[i]==285 && somab4[i]==285 && somab5[i]==285 && somab6[i]==285 && somab7[i]==285 && somab8[i]==285 && somab9[i]==285){
        printf("Instancia %d\n",i+1);
        printf("SIM\n\n");
  }else{
    printf("Instancia %d\n",i+1);
    printf("NAO\n\n");
        
        
      }
  } 
  return 0;
}
  


  


